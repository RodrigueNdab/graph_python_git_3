# Imports
```{python}
from openai import OpenAI
import pandas as pd
import numpy as np
from local_settings import OPENAI_KEY
```

# Setting up the OpenAI Client

```{python}

client = OpenAI(api_key=OPENAI_KEY)
```

# Making our first call

```{python}
response = client.chat.completions.create(
    model="gpt-4o-mini", messages=[{"role": "user", "content": "What is the most tourist-friendly city in France?"}]
)

```

```{python}
response.choices[0].message.content
```

# Defining a Hepler function

```{python}
def llm_chat(message):
    response = client.chat.completions.create(
        model="gpt-4o-mini", messages=[{"role": "user", "content": message}]
    )
    return response.choices[0].message.content
```

```{python}

llm_chat("WHAT are the top 10 Universities in the world ")

```

## practice : tourist friendly cities in Brazil


```{python}
rec_brazil = llm_chat("what is the most tourist-friendly city in Brazil. ")
rec_brazil
```

# varibles as prompt inputs 


```{python}
def city_rec(country):
    prompt = f"What is the most tourist-friendly city in {country}?"
    return llm_chat(prompt)

city_rec_vec = np.vectorize(city_rec)
 
```

```{python}
city_rec_vec(["Burundi", "Rwanda"])

```

```{python}
city_rec("Burundi")
```

```{python}

country_df = pd.DataFrame({"country": ["Nigeria", "Chile", "France", "Canada"]})
country_df
```

```{python}
# Using the vectorized function on a dataframe
country_df["city_rec"] = city_rec_vec(country_df["country"])
country_df.to_csv()
```
# practice get local dishes

Create a function called get_local_dishes that takes a country name as input and returns some of the most famous local dishes from that country. Then, vectorize this function and apply it to the country_df DataFrame to add a column with local dish recommendations for each country.
```{python}
def get_local_dishes(country):
    prompt = f"What are the most famous local dishes from {country}?"
    return llm_chat(prompt)
```

```{python}
local_dishes_recommended = np.vectorize(get_local_dishes)

```


```{python}
country_df["get_local_dishes"] = local_dishes_recommended(country_df["country"])
country_df
```
# automated summary : Movies dataset 

```{python}
import vega_datasets as vd
movies = vd.data.movies().head() 
movies
```


```{python}

movies.to_dict(orient="records")
```


```{python}
movies["full_dict"] = movies.to_dict(orient="records")
movies
```


```{python}
def movie_performance(movie_data):
    prompt = f"Considering the following data on this movie {movie_data}, provide a one-paragraph summary of its performance for my report."
    return llm_chat(prompt)

    import numpy as np



```


```{python}

movie_performance("Name: Rodrigue's Movie, Sales: 100,000 USD")
```


```{python}
movie_performance_vec = np.vectorize(movie_performance)

```

```{python}
movies["llm_summary"] = movie_performance_vec(movies["full_dict"])
movies.to_csv("outputs/movies_output.csv")
```

```{python}
import os
from pathlib import Path

# Ensure the directory exists
Path("outputs").mkdir(parents=True, exist_ok=True)

# Save the DataFrame to the file
movies.to_csv("outputs/movies_output.csv")

```

# practice : weather summary

```{python}
weather = vd.data.seattle_weather().head()

weather.to_dict(orient="records")

weather["full_dict"] = weather.to_dict(orient="records")
weather
```


```{python}

def weather_sum(weather):
    prompt = f"Considering the following weather on this day {weather}, provide a one-paragraph summary of its performance for my report."
    return llm_chat(prompt)

    import numpy as np
```


```{python}
weather_sum_vec = np.vectorize(weather_sum)
```


```{python}
weather["weather_summary"] = weather_sum_vec(weather["full_dict"])
weather

```

```{python}

weather.to_csv("outputs/weather_output.csv")
```

